#!/bin/bash
# {{ ansible_managed }}
#
# Create a monitoring report of the import processes and send via mail.
#
# ERRORS - number of processing errors in the process
# FAILURES - number of conspicuities in the data 
#

FAILURE_BOUND={{ oerindex_monitoring_import_failure_bound }} # send report when number of failures is greater than or equal to this bound
MAIL_RECIPIENTS={{ oerindex_monitoring_recipients }}
MAIL_FROM_ADDRESS={{ oerindex_monitoring_from_address }}

ETL_REPORT=$({{ base_dir }}/bin/monitoring-etl.sh)
IMPORTSCRIPT_REPORT=$({{ base_dir }}/bin/monitoring-import-scripts.sh)
{% if internationalization_tool_install %}INTERNATIONALIZATION_REPORT=$({{ base_dir }}/bin/monitoring-internationalization.sh)
{% endif %}
INCONSISTENCY_BY_WITHOUT_AUTHOR_REPORT=$(curl --netrc-file {{ base_dir }}/conf/oer_index_access -X POST --header 'Content-Type: application/json' --header 'Accept: application/json' "http://{{ elasticsearch_host }}:{{ elasticsearch_port }}/{{ elasticsearch_oer_index_alias_name }}/_search" -d '{"query": {"bool": { "filter": [{"wildcard": {"license.id": {"value": "*creativecommons.org/*/by*"}}}], "must_not": {"exists": {"field": "creator"}}}}, "size": 0, "aggs": {"providers": { "terms": { "field": "mainEntityOfPage.provider.name", "size": 100 }}}}' | jq -r '.aggregations.providers.buckets[] | "\(.key): \(.doc_count)"')
MULTI_PROVIDER_RESOURCES_REPORT=$(curl --netrc-file {{ base_dir }}/conf/oer_index_access -X POST --header 'Content-Type: application/json' --header 'Accept: application/json' "http://{{ elasticsearch_host }}:{{ elasticsearch_port }}/{{ elasticsearch_oer_index_alias_name }}/_search" -d '{"size": 0,"query": {"bool": {"filter": {"script": {"script": "doc.containsKey(\u0027mainEntityOfPage.provider.name\u0027) && doc[\u0027mainEntityOfPage.provider.name\u0027].length > 1"}}}},"aggs": {"providers": {"terms": {"script": {"source": "def list = new ArrayList();for(int i=0; i<doc[\u0027mainEntityOfPage.provider.name\u0027].length; i++){list.add(doc[\u0027mainEntityOfPage.provider.name\u0027][i]);}Collections.sort(list);return list.join(\u0027 / \u0027);"}}}}}' | jq -r '.aggregations.providers.buckets[] | "\(.key): \(.doc_count)"')
MISSING_OPEN_LICENSE_REPORT=$(curl --netrc-file {{ base_dir }}/conf/oer_index_access -X POST --header 'Content-Type: application/json' --header 'Accept: application/json' "http://{{ elasticsearch_host }}:{{ elasticsearch_port }}/{{ elasticsearch_oer_index_alias_name }}/_search" -d '{"size": 0, "aggs": {"providers": {"terms": {"field": "mainEntityOfPage.provider.name", "size": 1000}, "aggs": {"without_license": {"filter": {"bool": {"must_not": [{"exists": {"field": "license"}}]}}}}}}}' | jq -r '[.aggregations.providers.buckets[] | select(.without_license.doc_count > 0)] | sort_by(.without_license.doc_count) | reverse[] | "\(.key): \(.without_license.doc_count) / \(.doc_count)"')

ETL_PROCESSES=$(echo "$ETL_REPORT" | grep 'Import channel' | wc -l)
ETL_ERRORS=$(echo "$ETL_REPORT" | grep 'FAILED:' | wc -l)
ETL_FAILURES=$(echo "$ETL_REPORT" | gawk -v failures='0' 'match($0, /SUCCESS: (.+), FAIL-PROCESS: (.+), FAIL-VALIDATION: (.+), FAIL-WRITE: (.+)/, a) {failures = failures + (a[2] == "n/a" ? 0 : a[2]) + a[3] + a[4]}END{print failures}')
ETL_SUCCESSES=$(echo "$ETL_REPORT" | gawk -v successes='0' 'match($0, /SUCCESS: (.+), FAIL-PROCESS: (.+), FAIL-VALIDATION: (.+), FAIL-WRITE: (.+)/, a) {successes = successes + a[1]}END{print successes}')

IMPORTSCRIPT_PROCESSES=$(echo "$IMPORTSCRIPT_REPORT" | grep 'Import channel' | wc -l)
IMPORTSCRIPT_ERRORS=$(echo "$IMPORTSCRIPT_REPORT" | grep 'FAILED:' | wc -l)
IMPORTSCRIPT_FAILURES=$(echo "$IMPORTSCRIPT_REPORT" | gawk -v failures='0' 'match($0, /SUCCESS: (.+), FAIL: (.+)/, a) {failures = failures + a[2]}END{print failures}')
IMPORTSCRIPT_SUCCESSES=$(echo "$IMPORTSCRIPT_REPORT" | gawk -v successes='0' 'match($0, /SUCCESS: (.+), FAIL: (.+)/, a) {successes = successes + a[1]}END{print successes}')

REPORT="$ETL_REPORT
$IMPORTSCRIPT_REPORT
{% if internationalization_tool_install %}

Internationalization-Tool:
$INTERNATIONALIZATION_REPORT
{% endif %}

-----------------------
Resources without open license
$MISSING_OPEN_LICENSE_REPORT

-----------------------
Resources offered by multiple providers
$MULTI_PROVIDER_RESOURCES_REPORT

-----------------------

Inconsistencies:

CC-BY-XX without author
-----------------------
$INCONSISTENCY_BY_WITHOUT_AUTHOR_REPORT
"
PROCESSES=$(($ETL_PROCESSES+$IMPORTSCRIPT_PROCESSES))
ERRORS=$(($ETL_ERRORS+$IMPORTSCRIPT_ERRORS))
FAILURES=$(($ETL_FAILURES+$IMPORTSCRIPT_FAILURES))
SUCCESSES=$(($ETL_SUCCESSES+$IMPORTSCRIPT_SUCCESSES))

SUBJECT="OERSI Import Monitoring - processes $(($PROCESSES-$ERRORS)) ok, $ERRORS error (data $SUCCESSES ok, $FAILURES failed)"

if [ "$FAILURES" -ge "$FAILURE_BOUND" ] || [ "$ERRORS" -gt "0" ]; then
  echo "Sending report ($SUBJECT)"
  echo "$REPORT" | mail -s "$SUBJECT" -r $MAIL_FROM_ADDRESS $MAIL_RECIPIENTS
else
  echo "Don't send report ($SUBJECT)"
fi
