#!/bin/bash
# {{ ansible_managed }}
#
# Create and use a new oer_data index and force a rebuild from the backend-data.
#

TIMESTAMP=$(date +'%Y%m%d%H%M%S')
INDEX_VERSION={{ elasticsearch_oer_index_version }}
INDEX_NAME={{ elasticsearch_oer_index_name_prefix }}${INDEX_VERSION}_${TIMESTAMP}
INDEX_INTERNAL_NAME={{ elasticsearch_oer_index_internal_name_prefix }}${INDEX_VERSION}_${TIMESTAMP}
for INDEX in $INDEX_NAME $INDEX_INTERNAL_NAME; do
  date +"*** %Y-%m-%d %H:%M:%S creating index $INDEX"
  curl --netrc-file {{ base_dir }}/conf/oer_index_access -X PUT "http://{{ elasticsearch_host }}:{{ elasticsearch_port }}/${INDEX}"
  echo ""
done

date +"*** %Y-%m-%d %H:%M:%S write conf"
read -r -d '' QUERY << EOC
{
  "metadataIndexName": "${INDEX_NAME}",
  "additionalMetadataIndexName": "${INDEX_INTERNAL_NAME}"
}
EOC
curl --netrc-file {{ base_dir }}/conf/oer_backend_access --header 'Content-Type: application/json' -H 'Accept: application/json' -d "$QUERY" -XPOST "{{ oerindex_backend_internal_api_base_url }}/metadata-config"

date +"*** %Y-%m-%d %H:%M:%S write conf file"
# necessary for create/recreate-index-check during installation
cat >{{ base_dir }}/conf/oer_index.conf <<EOL
OER_INDEX_VERSION=$INDEX_VERSION
OER_INDEX_FEATURE_SYNONYM={{ oerindex_features_use_synonyms | string }}
EOL

reindex() {
  date +"*** %Y-%m-%d %H:%M:%S reindex $1"
  read -r -d '' REINDEX_QUERY << EOC
{
  "source": {
    "index": "oersi_backend_metadata",
    "_source": ["$2"]
  },
  "dest": {
    "index": "$1"
  },
  "script": {
    "source": "ctx._source = ctx._source.$2"
  }
}
EOC
  curl --netrc-file {{ base_dir }}/conf/oer_index_access -X POST --header 'Content-Type: application/json' --header 'Accept: application/json' -d "$REINDEX_QUERY" "http://{{ elasticsearch_host }}:{{ elasticsearch_port }}/_reindex"
  echo ""
}
reindex ${INDEX_NAME} data
reindex ${INDEX_INTERNAL_NAME} additionalData
date +"*** %Y-%m-%d %H:%M:%S reindex done"
