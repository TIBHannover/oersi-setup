#!/bin/bash
# {{ ansible_managed }}
#
# Create and use a new oer_data index and force a rebuild from the sql-data.
#

if [ -z "$1" ]; then
  if [ $(systemctl list-unit-files "logstash*" | grep logstash | wc -l) -gt 0 ]; then
    PROCESS_LOGSTASH=true
  else
    PROCESS_LOGSTASH=false
  fi
else
  PROCESS_LOGSTASH=$1
fi
if [ "$PROCESS_LOGSTASH" = true ]; then
  date +"*** %Y-%m-%d %H:%M:%S logstash processing activated"
else
  date +"*** %Y-%m-%d %H:%M:%S logstash processing deactivated"
fi  

test "$PROCESS_LOGSTASH" = true && date +"*** %Y-%m-%d %H:%M:%S stop logstash" && sudo systemctl stop logstash.service

TIMESTAMP=$(date +'%Y%m%d%H%M%S')
INDEX_VERSION={{ elasticsearch_oer_index_version }}
INDEX_NAME={{ elasticsearch_oer_index_name_prefix }}${INDEX_VERSION}_${TIMESTAMP}
date +"*** %Y-%m-%d %H:%M:%S creating index $INDEX_NAME"
curl --netrc-file {{ base_dir }}/conf/oer_index_access -X PUT "http://{{ elasticsearch_host }}:{{ elasticsearch_port }}/${INDEX_NAME}"
echo ""

date +"*** %Y-%m-%d %H:%M:%S write conf file"
cat >{{ base_dir }}/conf/oer_index.conf <<EOL
OER_INDEX_VERSION=$INDEX_VERSION
OER_INDEX_TIMESTAMP=$TIMESTAMP
OER_INDEX_NAME=${INDEX_NAME}
EOL

test "$PROCESS_LOGSTASH" = true && date +"*** %Y-%m-%d %H:%M:%S reset jdbc-lastrun" && sudo /usr/share/logstash/bin/reset-jdbc-lastrun.sh
test "$PROCESS_LOGSTASH" = true && date +"*** %Y-%m-%d %H:%M:%S run logstash pipeline once" && sudo /usr/share/logstash/bin/run-oersi-pipeline-once.sh
test "$PROCESS_LOGSTASH" = true && date +"*** %Y-%m-%d %H:%M:%S start logstash" && sudo systemctl start logstash.service
