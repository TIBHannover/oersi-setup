---
- name: download and extract tomcat
  unarchive:
    remote_src: yes
    src: '{{tomcat_archive_url}}'
    dest: "{{tomcat_inst_dir}}"
    creates: "{{tomcat_inst_dir}}/{{tomcat_name}}"

- name: Check if tomcat.sh exists already
  stat:
    path: '{{ tomcat_bin }}/tomcat.sh'
  register: tomcat_script_stat_result

- name: stop tomcat
  shell: '{{ tomcat_stop_command }}'
  when: tomcat_script_stat_result.stat.exists

- name: create symlink
  file:
    path: '{{tomcat_home}}'
    src: '{{tomcat_name}}'
    state: link

- include: general-log-dir.yml
  when: (tomcat_log_dir is defined) and (tomcat_log_dir != "") and (tomcat_log_dir is not none)

- name: Configure tomcat-users.xml
  template:
    src: '{{ tomcat_users_xml_template }}'
    dest: '{{ tomcat_home }}/conf/tomcat-users.xml'

- name: Configure server.xml
  template:
    src: '{{ tomcat_server_xml_template }}'
    dest: '{{ tomcat_home }}/conf/server.xml'

- name: Ensures tomcat_bin dir exists
  file: path='{{tomcat_bin}}' state=directory

- name: Configure tomcat start-/stop-script
  template:
    src: tomcat.sh
    dest: '{{tomcat_bin}}/tomcat.sh'
    mode: 'a+x'

- name: Creates an crontab entry "@reboot {{tomcat_bin}}/tomcat.sh"
  cron:
    name: "tomcat start at reboot"
    special_time: reboot
    job: "{{tomcat_bin}}/tomcat.sh start"

- include: cleanup-logs.yml
