filter {
  jdbc_streaming  {
    jdbc_connection_string => "jdbc:mariadb://{{ mariadb_host }}:{{ mariadb_port }}/{{ oerindex_db.name }}"
    jdbc_user => "{{ oerindex_db.user }}"
    jdbc_password => "{{ oerindex_db.password }}"
    jdbc_driver_library => "/usr/share/logstash/logstash-core/lib/jars/mariadb-connector-java.jar"
    jdbc_driver_class => "org.mariadb.jdbc.Driver"
    parameters => { "metadata_id" => "id"}
    statement => "SELECT name AS fullname
                  FROM creator WHERE metadata_id = :metadata_id AND type = 'Person'"
    target => "authors"
  }
  jdbc_streaming  {
    jdbc_connection_string => "jdbc:mariadb://{{ mariadb_host }}:{{ mariadb_port }}/{{ oerindex_db.name }}"
    jdbc_user => "{{ oerindex_db.user }}"
    jdbc_password => "{{ oerindex_db.password }}"
    jdbc_driver_library => "/usr/share/logstash/logstash-core/lib/jars/mariadb-connector-java.jar"
    jdbc_driver_class => "org.mariadb.jdbc.Driver"
    parameters => { "metadata_id" => "id"}
    statement => "SELECT name
                  FROM creator WHERE metadata_id = :metadata_id AND type = 'Organization'"
    target => "institutions"
  }
  jdbc_streaming  {
    jdbc_connection_string => "jdbc:mariadb://{{ mariadb_host }}:{{ mariadb_port }}/{{ oerindex_db.name }}"
    jdbc_user => "{{ oerindex_db.user }}"
    jdbc_password => "{{ oerindex_db.password }}"
    jdbc_driver_library => "/usr/share/logstash/logstash-core/lib/jars/mariadb-connector-java.jar"
    jdbc_driver_class => "org.mariadb.jdbc.Driver"
    parameters => { "metadata_id" => "id"}
    statement => "SELECT identifier
                  FROM about WHERE metadata_id = :metadata_id"
    target => "subjects"
  }
  ruby {
    code => "
      $tz_name = `cat /etc/timezone`.chomp
      def fix_date(input_date)
        tz = TZInfo::Timezone.get($tz_name)
        d = DateTime.parse(input_date)
        return tz.to_local(d).strftime('%FT%T.%LZ')
      end
      def replace_date_by_fixed_date(field_name, event)
        logstash_date = event.get(field_name)
        unless logstash_date.nil?
          d = fix_date(logstash_date.to_iso8601)
          result = LogStash::Timestamp.new(d)
          event.set(field_name, result)
        end
      end
      unless $tz_name.nil? || $tz_name.empty?
        replace_date_by_fixed_date('date_created', event)
        replace_date_by_fixed_date('date_published', event)
      end
    "
  }
  ruby {
    code => "
      event.set('in_language', 'N/A') if event.get('in_language') == nil
    "
  }
  mutate {
    remove_field => ["tags", "@version", "@timestamp"]
    rename => { 
      "date_modified_internal" => "dateModifiedInternal"
      "date_created" => "dateCreated"
      "date_published" => "datePublished"
      "in_language" => "inLanguage"
      "learning_resource_type" => "learningResourceType"
      "thumbnail_url" => "thumbnailUrl"
    }
    add_field => {
      "keywords" => [ "", "" ]
    }
  }
}