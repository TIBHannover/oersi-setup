filter {
  jdbc_streaming  {
    jdbc_connection_string => "jdbc:mariadb://{{ mariadb_host }}:{{ mariadb_port }}/{{ oerindex_db.name }}"
    jdbc_user => "{{ oerindex_db.user }}"
    jdbc_password => "{{ oerindex_db.password }}"
    jdbc_driver_library => "/usr/share/logstash/logstash-core/lib/jars/mariadb-connector-java.jar"
    jdbc_driver_class => "org.mariadb.jdbc.Driver"
    parameters => { "metadata_id" => "internal_id"}
    statement => "SELECT identifier as id
                  FROM about WHERE metadata_id = :metadata_id"
    target => "about"
  }
  jdbc_streaming  {
    jdbc_connection_string => "jdbc:mariadb://{{ mariadb_host }}:{{ mariadb_port }}/{{ oerindex_db.name }}"
    jdbc_user => "{{ oerindex_db.user }}"
    jdbc_password => "{{ oerindex_db.password }}"
    jdbc_driver_library => "/usr/share/logstash/logstash-core/lib/jars/mariadb-connector-java.jar"
    jdbc_driver_class => "org.mariadb.jdbc.Driver"
    parameters => { "metadata_id" => "internal_id"}
    statement => "SELECT identifier as id, name, type
                  FROM creator WHERE metadata_id = :metadata_id"
    target => "creator"
  }
  ruby {
    code => "
      $tz_name = `cat /etc/timezone`.chomp
      def fix_date(input_date)
        tz = TZInfo::Timezone.get($tz_name)
        d = DateTime.parse(input_date)
        return tz.to_local(d).strftime('%FT%T.%LZ')
      end
      def replace_date_by_fixed_date(field_name, event)
        logstash_date = event.get(field_name)
        unless logstash_date.nil?
          d = fix_date(logstash_date.to_iso8601)
          result = LogStash::Timestamp.new(d)
          event.set(field_name, result)
        end
      end
      unless $tz_name.nil? || $tz_name.empty?
        replace_date_by_fixed_date('date_created', event)
        replace_date_by_fixed_date('date_published', event)
        replace_date_by_fixed_date('md_date_created', event)
        replace_date_by_fixed_date('md_date_modified', event)
      end
    "
  }
  ruby {
    code => "
      event.set('[audience][id]', event.get('audience_identifier'))
      event.set('[learningResourceType][id]', event.get('learning_resource_type_identifier'))
      event.set('[mainEntityOfPage][basedOn][id]', event.get('md_identifier'))
      event.set('[mainEntityOfPage][basedOn][type]', event.get('md_type'))
      event.set('[mainEntityOfPage][basedOn][dateCreated]', event.get('md_date_created'))
      event.set('[mainEntityOfPage][basedOn][dateModified]', event.get('md_date_modified'))
      event.set('[mainEntityOfPage][basedOn][provider]', event.get('md_provider'))
    "
  }
  mutate {
    rename => { 
      "date_created" => "dateCreated"
      "date_published" => "datePublished"
      "in_language" => "inLanguage"
    }
    add_field => {
      "[@metadata][internal_id]" => "%{internal_id}"
      "[mainEntityOfPage][id]" => "{{ oerindex_backend_searchapi_url }}{{ elasticsearch_oer_index_alias_name }}/_doc/%{internal_id}"
      "[mainEntityOfPage][dateModified]" => "%{date_modified_internal}"
    }
    remove_field => [
      "tags", "@version", "@timestamp", 
      "internal_id",
      "audience_identifier",
      "learning_resource_type_identifier",
      "md_identifier",
      "md_type",
      "md_date_created",
      "md_date_modified",
      "md_provider",
      "date_modified_internal"
    ]
  }
}