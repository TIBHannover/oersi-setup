#!/usr/bin/env python3
# {{ ansible_managed }}
#
# Updates vocab schemes used by OERSI-backend.
#
import json
import logging
import netrc
import os.path
import re
import requests
import rdflib


logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",level=logging.INFO)
backend_url = "{{ oerindex_backend_internal_api_base_url }}"
netrc_file = "{{ base_dir }}/conf/oer_backend_access"
netrc_auth = netrc.netrc(netrc_file).authenticators("localhost")
backend_auth = (netrc_auth[0], netrc_auth[2])
custom_labels_dir = "{{ oerindex_backend_configdir }}/labels"


def get_content_from_url(url):
    return requests.get(url).text


def update_vocab(vocab_url, vocab_identifier):
    items = load_vocab_items_from_turtle(vocab_url)
    items = merge_custom_labels(items, vocab_identifier)
    requests.post(backend_url + "/vocab/bulk", auth=backend_auth, json={"vocabIdentifier": vocab_identifier, "items": items})


def merge_custom_labels(items, vocab_identifier):
    custom_label_file = custom_labels_dir + "/custom-labels-" + vocab_identifier + ".json"
    if os.path.isfile(custom_label_file):
        logging.info("Merging custom labels from " + custom_label_file)
        with open(custom_label_file) as f:
            for (key, labels_by_languages) in json.load(f).items():
                matching_item = next((x for x in items if x["key"] == key), None)
                if matching_item:
                    matching_item["prefLabels"] = {**matching_item["prefLabels"], **labels_by_languages}
                else:
                    matching_item = {"key": key, "prefLabels": labels_by_languages}
                    items.append(matching_item)
    return items


def load_vocab_items_from_turtle(ttl_url):
    ttl = get_content_from_url(ttl_url)
    g = rdflib.Graph()
    g.parse(data=ttl, format="turtle")
    label_pred = rdflib.URIRef('http://www.w3.org/2004/02/skos/core#prefLabel')
    sparql_query = '''
    PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
    SELECT ?item ?parent
    WHERE {
      ?item rdf:type skos:Concept .
      OPTIONAL{?item skos:broader ?parent .}
    }
    '''
    items = []
    for concept in g.query(sparql_query):
      labels = {}
      for label in g.objects(subject=concept["item"], predicate=label_pred):
        lng = re.search("[a-z]+", label.language).group()
        labels[lng] = str(label)
      items.append({"key": str(concept["item"]), "parentKey": str(concept["parent"]) if concept["parent"] else None, "prefLabels": labels})
    return items


if __name__ == "__main__":
    logging.info("Start vocab update")
{% for scheme_update in (oerindex_backend_vocab_scheme_updates | default([], true)) %}
    logging.info("Processing {{ scheme_update.vocabName }}")
    update_vocab("{{ scheme_update.schemeUrl }}", "{{ scheme_update.vocabName }}")
{% endfor %}
    logging.info("Vocab update finsihed")
